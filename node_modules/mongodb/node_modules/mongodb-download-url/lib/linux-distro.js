"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCurrentLinuxDistro = void 0;
const child_process_1 = __importDefault(require("child_process"));
const fs_1 = require("fs");
const util_1 = require("util");
const debug_1 = __importDefault(require("debug"));
const debug = debug_1.default('mongodb-download-url:linux-distro');
const execFile = util_1.promisify(child_process_1.default.execFile);
let osRelease;
async function getCurrentLinuxDistro() {
    var _a, _b;
    if (process.env.DISTRO_ID) {
        const distroId = process.env.DISTRO_ID.split('-')[0].split('_')[0];
        debug('Using environment-provided linux distro ID', distroId);
        let match;
        if (match = distroId.match(/^ubuntu(\d\d)(\d\d)$/)) {
            return listDistroIds({ id: 'ubuntu', version: match[1] });
        }
        else if (match = distroId.match(/^debian([8-9])\d$/)) {
            return listDistroIds({ id: 'debian', version: match[1] });
        }
        else if (match = distroId.match(/^debian([1-7]\d)$/)) {
            return listDistroIds({ id: 'debian', version: match[1] });
        }
        else if (match = distroId.match(/^suse(\d+)$/)) {
            return listDistroIds({ id: 'suse', version: match[1] });
        }
        else if (match = distroId.match(/^rhel(\d+)$/)) {
            return listDistroIds({ id: 'redhatenterprise', version: match[1] });
        }
        else if (['amazon', 'amzn64', 'amazon1'].includes(distroId)) {
            return listDistroIds({ id: 'amazon', version: '2018.03' });
        }
        return [{ value: distroId, priority: 100 }];
    }
    let osReleaseId;
    try {
        osRelease !== null && osRelease !== void 0 ? osRelease : (osRelease = await fs_1.promises.readFile('/etc/os-release', 'utf8'));
        debug('loaded /etc/os-release');
    }
    catch (err) {
        if (err.code === 'ENOENT') {
            osRelease = '';
        }
    }
    if (osRelease) {
        const id = osReleaseId = (_a = osRelease.match(/^ID="?(.+?)"?$/m)) === null || _a === void 0 ? void 0 : _a[1];
        const version = (_b = osRelease.match(/^VERSION_ID="?(.+?)"?$/m)) === null || _b === void 0 ? void 0 : _b[1];
        if (id && version) {
            debug('got os-release info', { id, version });
            const results = listDistroIds({ id, version });
            if (results.length > 0) {
                return results;
            }
        }
    }
    const { id, version } = await lsbReleaseInfo();
    const results = listDistroIds({ id, version });
    if (results.length > 0) {
        return results;
    }
    throw new Error(`Could not figure out current Linux distro (${id}, ${osReleaseId})`);
}
exports.getCurrentLinuxDistro = getCurrentLinuxDistro;
function listDistroIds({ id, version }) {
    const results = [];
    switch (id.toLowerCase()) {
        case 'ubuntu': {
            const major = +version.split('.')[0];
            if (major >= 12)
                results.push({ value: 'ubuntu1204', priority: 100 });
            if (major >= 14)
                results.push({ value: 'ubuntu1404', priority: 200 });
            if (major >= 16)
                results.push({ value: 'ubuntu1604', priority: 300 });
            if (major >= 18)
                results.push({ value: 'ubuntu1804', priority: 400 });
            if (major >= 20)
                results.push({ value: 'ubuntu2004', priority: 500 });
            if (major > 20)
                results.push({ value: 'ubuntu' + version.replace('.', ''), priority: 600 });
            return results;
        }
        case 'debian': {
            if (+version >= 8)
                results.push({ value: 'debian81', priority: 100 });
            if (+version >= 9)
                results.push({ value: 'debian92', priority: 200 });
            if (+version >= 10)
                results.push({ value: 'debian10', priority: 300 });
            if (+version > 10)
                results.push({ value: 'debian' + version, priority: 400 });
            return results;
        }
        case 'suse':
        case 'sles':
            return [{ value: 'suse' + version.split('.')[0], priority: 100 }];
        case 'amzn':
        case 'amzn64':
        case 'amazon':
            if (version.match(/^201[0-9]\./)) {
                return [{ value: 'amazon', priority: 100 }, { value: 'amzn64', priority: 100 }];
            }
            else {
                return [{ value: 'amazon' + version.replace('.', ''), priority: 100 }];
            }
        case 'centos':
            return [{ value: 'rhel' + version + '0', priority: 100 }];
        case 'redhatenterprise':
        case 'redhatenterpriseserver': {
            const want = +version.replace('.', '');
            const known = [55, 57, 62, 67, 70, 71, 72, 80, 81, 82];
            const allowedVersions = known.filter(v => v <= want);
            return allowedVersions.map((v, i) => ({ value: 'rhel' + v, priority: (i + 1) * 100 }));
        }
    }
    return [];
}
async function lsbReleaseInfo() {
    const [id, version] = await Promise.all([
        (async () => {
            return (await execFile('lsb_release', ['-si'], { encoding: 'utf8' })).stdout.trim();
        })(),
        (async () => {
            return (await execFile('lsb_release', ['-sr'], { encoding: 'utf8' })).stdout.trim();
        })()
    ]);
    debug('got lsb info', { id, version });
    return { id, version };
}
//# sourceMappingURL=linux-distro.js.map